
import startCase from 'lodash.startcase'
import React, { Component } from 'react'
import Lolliplot from '@oncojs/react-lolliplot'
import groupByType from '@oncojs/react-lolliplot/groupByType'
import * as d3 from 'd3'
import mockData from './data'

class App extends Component {
  state = {
    width: 0,
    data: mockData(100),
    min: 0,
    max: 500,
    blacklist: `impact`,
    consequenceBlacklist: new Set(),
    impactBlacklist: new Set([`HIGH`, `MODERATE`]),
  }
  componentDidMount() {
    this.setState({ width: this.el.clientWidth })
    window.onresize = () => {
      this.setState({ width: this.el.clientWidth })
    }
  }
  update = state => this.setState(state)
  randomize = () => this.setState({ data: mockData(100) })
  reset = () => this.setState({ min: 0, max: 500 })
  toggleBlacklistItem = variant => {
    let blacklist = new Set(this.state[`${this.state.blacklist}Blacklist`])
    if (blacklist.has(variant)) {
      blacklist.delete(variant)
    } else {
      blacklist.add(variant)
    }
    this.setState({ [`${this.state.blacklist}Blacklist`]: blacklist })
  }
  render() {
    let filterByType = type => d => !this.state[`${type}Blacklist`].has(d[type])

    return (
      <div>
        <h1>Lolliplot</h1>
        <input
          type="text"
          value={this.state.min}
          onChange={e => this.setState({ min: +e.target.value })}
        />
        <input
          type="text"
          value={this.state.max}
          onChange={e => this.setState({ max: +e.target.value })}
        />
        <div style={{ display: `flex` }}>
          <div style={{ flex: 1 }} ref={el => this.el = el}>
            {this.state.width &&
              <Lolliplot
                {...this.state}
                d3={d3}
                update={this.update}
                data={{
                  ...this.state.data,
                  mutations: this.state.data.mutations.filter(
                    filterByType(this.state.blacklist)
                  ),
                }}
              />
            }
          </div>
          <div style={{ marginLeft: `20px`, width: `300px` }}>
            <div>
              Viewing {this.state.data.mutations.filter(d =>
                d.x > this.state.min && d.x < this.state.max
              ).filter(filterByType(this.state.blacklist)).length} /
              {this.state.data.mutations.length} Mutations
            </div>
            <div>
              <select
                value={this.state.blacklist}
                onChange={e => this.setState({ blacklist: e.target.value })}
              >
                <option value="consequence">Consequence</option>
                <option value="impact">Impact (VEP)</option>
              </select>
            </div>
            <div>
              {Object.entries(groupByType(this.state.blacklist, this.state.data.mutations))
                .map(([variant, xs]) =>
                  <div key={variant}>
                    <span onClick={() => this.toggleBlacklistItem(variant)}>
                      {this.state[`${this.state.blacklist}Blacklist`].has(variant) ? `O` : `X`}
                    </span>
                    <span>{startCase(variant)}:</span>
                    <span>
                      <b>
                        {xs.filter(d =>
                          d.x > this.state.min && d.x < this.state.max
                        ).filter(filterByType(this.state.blacklist)).length
                        }
                      </b>
                      / <b>{xs.length}</b>
                    </span>
                  </div>
                )
              }
            </div>
          </div>
        </div>
        <button onClick={this.randomize}>Randomize</button>
        <button onClick={this.reset}>Reset</button>
      </div>
    )
  }
}

export default App
