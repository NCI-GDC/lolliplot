// @flow

import * as d3 from 'd3'
import { halfPixel } from './spatial'
import theme from './theme'

type TSetupMutationsArgs = {
  consequenceColors: Object,
  scaleLinearY: Function,
  onMutationClick: Function,
  onMutationMouseover: ?Function,
  onMutationMouseout: ?Function,
  data: Object,
  yAxisOffset: number,
  xAxisOffset: number,
  height: number,
  proteinHeight: number,
  scale: number,
  maxDonors: number,
  store: Object,
  mutationId: string,
}
type TSetupMutations = (args: TSetupMutationsArgs) => Object
let setupMutations: TSetupMutations = ({
  consequenceColors,
  scaleLinearY,
  onMutationClick,
  onMutationMouseover,
  onMutationMouseout,
  data,
  yAxisOffset,
  xAxisOffset,
  height,
  proteinHeight,
  scale,
  store,
  mutationId,
  ctx,
}) => {

  // return { mutationChartLines, mutationChartCircles }
  return {}
}

type TUpdateMutationsArgs = {
  checked: bool,
  mutationClass: ?string,
  type: ?string,
  data: Object,
}
type TUpdateMutations = (args: TUpdateMutationsArgs) => void
let updateMutations: TUpdateMutations = ({
  checked,
  mutationClass,
  type,
  data,
}) => {
  let selectedMutations = mutationClass
    ? data.mutations.filter(x => x[mutationClass] === type)
    : data.mutations.slice()

  if (!checked) {
    selectedMutations.forEach(d => {
      d3.select(`.mutation-line-${d.id}`).attr(`opacity`, 0)
      d3.selectAll(`.mutation-circle-${d.id}`).attr(`opacity`, 0)
    })
  } else {
    selectedMutations.forEach(d => {
      d3.select(`.mutation-line-${d.id}`).attr(`opacity`, 1)
      d3.selectAll(`.mutation-circle-${d.id}`).attr(`opacity`, 1)
    })
  }
}

export {
  setupMutations,
  updateMutations,
}
