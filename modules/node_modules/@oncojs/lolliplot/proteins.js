// @flow

import { halfPixel } from './spatial'

type TSetupProteinsArgs = {
  d3: Object,
  chart: Object,
  defs: Object,
  onProteinMouseover: ?Function,
  onProteinMouseout: ?Function,
  data: Object,
  scale: number,
  yAxisOffset: number,
  xAxisOffset: number,
  proteinHeight: number,
  height: number,
  uniqueSelector: string,
}
type TSetupProteinsReturn = {
  proteinBars: Object,
  proteinClipPaths: Object,
  proteinNames: Object,
  proteinMinimap: Object,
}
type TSetupProteins = (args: TSetupProteinsArgs) => TSetupProteinsReturn
let setupProteins: TSetupProteins = ({
  d3,
  chart,
  defs,
  onProteinMouseover,
  onProteinMouseout,
  data,
  scale,
  yAxisOffset,
  xAxisOffset,
  proteinHeight,
  height,
  uniqueSelector,
}) => {

  let proteinBars = chart
    .append(`g`)
    .selectAll(`rect`)
    .data(data.proteins)
    .enter()
    .append(`rect`)
    .attrs({
      'clip-path': `url(#${uniqueSelector}-chart-clip)`,
      class: d => `range-${d.id}-${d.start}-${d.end}`,
      x: d => (d.start * scale) + yAxisOffset + halfPixel,
      y: height - xAxisOffset + halfPixel,
      width: d => ((d.end - d.start) * scale) - 1,
      height: proteinHeight - halfPixel,
      fill: (d, i) => `hsl(${i * 100}, 80%, 90%)`,
    })
    .on(`mouseover`, function(d, i) {
      d3.select(this)
        .attrs({
          fill: `hsl(${i * 100}, 85%, 70%)`,
          cursor: `pointer`,
        })

      if (onProteinMouseover) {
        onProteinMouseover(d, d3.event)
      } else {
        d3.select(`.tooltip`)
          .style(`left`, d3.event.pageX + 20 + `px`)
          .style(`top`, d3.event.pageY - 22 + `px`)
          .html(`
            <div>${d.id}</div>
            <div>${d.description}</div>
            <div><b>Click to zoom</b></div>
          `)
      }
    })
    .on(`mouseout`, function(d, i) {
      d3.select(this)
        .attrs({
          fill: `hsl(${i * 100}, 80%, 90%)`,
        })

      if (onProteinMouseout) onProteinMouseout(d, d3.event)

      d3.select(`.tooltip`).style(`left`, `-9999px`)
    })

  let proteinClipPaths = defs
    .append(`g`)
    .attr(`class`, `protein-text-clip-path`)
    .selectAll(`clipPath`)
    .data(data.proteins)
    .enter()
    .append(`clipPath`)
    .attr(`id`, d => `${uniqueSelector}-clip-range-${d.id}-${d.start}-${d.end}`)
    .append(`rect`)
    .attrs({
      class: d => `clip-range-${d.id}-${d.start}-${d.end}-rect`,
      x: d => (d.start * scale) + yAxisOffset + halfPixel,
      y: height - xAxisOffset + halfPixel,
      width: d => ((d.end - d.start) * scale) - 1,
      height: proteinHeight - halfPixel,
    })

  let proteinNames = chart
    .append(`g`)
    .attrs({
      'clip-path': `url(#${uniqueSelector}-chart-clip)`,
    })
    .selectAll(`text`)
    .data(data.proteins)
    .enter()
    .append(`text`)
    .text(d => d.id.toUpperCase())
    .attrs({
      class: d => `protein-name-${d.id}-${d.start}-${d.end}`,
      'clip-path': d => `url(#${uniqueSelector}-clip-range-${d.id}-${d.start}-${d.end})`,
      x: d => (d.start * scale) + yAxisOffset,
      y: height - xAxisOffset + proteinHeight,
      fill: (d, i) => `hsl(${i * 100}, 80%, 30%)`,
      'font-size': `11px`,
      'pointer-events': `none`,
    })

  let proteinMinimap = chart
    .append(`g`)
    .selectAll(`rect`)
    .data(data.proteins)
    .enter()
    .append(`rect`)
    .attrs({
      class: d => `domain-${d.id}`,
      x: d => (d.start * scale) + yAxisOffset,
      y: height - xAxisOffset + proteinHeight + 60,
      width: d => ((d.end - d.start) * scale),
      height: 10 - halfPixel,
      fill: (d, i) => `hsl(${i * 100}, 80%, 90%)`,
      'pointer-events': `none`,
    })

  return {
    proteinBars,
    proteinClipPaths,
    proteinNames,
    proteinMinimap,
  }
}

/*----------------------------------------------------------------------------*/

export default setupProteins
