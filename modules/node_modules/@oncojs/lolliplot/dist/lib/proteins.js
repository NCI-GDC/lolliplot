'use strict';

exports.__esModule = true;

var _spatial = require('./spatial');

var setupProteins = function setupProteins(_ref) {
  var d3 = _ref.d3,
      chart = _ref.chart,
      defs = _ref.defs,
      onProteinMouseover = _ref.onProteinMouseover,
      onProteinMouseout = _ref.onProteinMouseout,
      data = _ref.data,
      scale = _ref.scale,
      yAxisOffset = _ref.yAxisOffset,
      xAxisOffset = _ref.xAxisOffset,
      proteinHeight = _ref.proteinHeight,
      height = _ref.height,
      uniqueSelector = _ref.uniqueSelector;


  var proteinBars = chart.append('g').selectAll('rect').data(data.proteins).enter().append('rect').attrs({
    'clip-path': 'url(#' + uniqueSelector + '-chart-clip)',
    class: function _class(d) {
      return 'range-' + d.id + '-' + d.start + '-' + d.end;
    },
    x: function x(d) {
      return d.start * scale + yAxisOffset + _spatial.halfPixel;
    },
    y: height - xAxisOffset + _spatial.halfPixel,
    width: function width(d) {
      return (d.end - d.start) * scale - 1;
    },
    height: proteinHeight - _spatial.halfPixel,
    fill: function fill(d, i) {
      return 'hsl(' + i * 100 + ', 80%, 90%)';
    }
  }).on('mouseover', function (d, i) {
    d3.select(this).attrs({
      fill: 'hsl(' + i * 100 + ', 85%, 70%)',
      cursor: 'pointer'
    });

    if (onProteinMouseover) {
      onProteinMouseover(d, d3.event);
    } else {
      d3.select('.tooltip').style('left', d3.event.pageX + 20 + 'px').style('top', d3.event.pageY - 22 + 'px').html('\n            <div>' + d.id + '</div>\n            <div>' + d.description + '</div>\n            <div><b>Click to zoom</b></div>\n          ');
    }
  }).on('mouseout', function (d, i) {
    d3.select(this).attrs({
      fill: 'hsl(' + i * 100 + ', 80%, 90%)'
    });

    if (onProteinMouseout) onProteinMouseout(d, d3.event);

    d3.select('.tooltip').style('left', '-9999px');
  });

  var proteinClipPaths = defs.append('g').attr('class', 'protein-text-clip-path').selectAll('clipPath').data(data.proteins).enter().append('clipPath').attr('id', function (d) {
    return uniqueSelector + '-clip-range-' + d.id + '-' + d.start + '-' + d.end;
  }).append('rect').attrs({
    class: function _class(d) {
      return 'clip-range-' + d.id + '-' + d.start + '-' + d.end + '-rect';
    },
    x: function x(d) {
      return d.start * scale + yAxisOffset + _spatial.halfPixel;
    },
    y: height - xAxisOffset + _spatial.halfPixel,
    width: function width(d) {
      return (d.end - d.start) * scale - 1;
    },
    height: proteinHeight - _spatial.halfPixel
  });

  var proteinNames = chart.append('g').attrs({
    'clip-path': 'url(#' + uniqueSelector + '-chart-clip)'
  }).selectAll('text').data(data.proteins).enter().append('text').text(function (d) {
    return d.id.toUpperCase();
  }).attrs({
    class: function _class(d) {
      return 'protein-name-' + d.id + '-' + d.start + '-' + d.end;
    },
    'clip-path': function clipPath(d) {
      return 'url(#' + uniqueSelector + '-clip-range-' + d.id + '-' + d.start + '-' + d.end + ')';
    },
    x: function x(d) {
      return d.start * scale + yAxisOffset;
    },
    y: height - xAxisOffset + proteinHeight,
    fill: function fill(d, i) {
      return 'hsl(' + i * 100 + ', 80%, 30%)';
    },
    'font-size': '11px',
    'pointer-events': 'none'
  });

  var proteinMinimap = chart.append('g').selectAll('rect').data(data.proteins).enter().append('rect').attrs({
    class: function _class(d) {
      return 'domain-' + d.id;
    },
    x: function x(d) {
      return d.start * scale + yAxisOffset;
    },
    y: height - xAxisOffset + proteinHeight + 60,
    width: function width(d) {
      return (d.end - d.start) * scale;
    },
    height: 10 - _spatial.halfPixel,
    fill: function fill(d, i) {
      return 'hsl(' + i * 100 + ', 80%, 90%)';
    },
    'pointer-events': 'none'
  });

  return {
    proteinBars: proteinBars,
    proteinClipPaths: proteinClipPaths,
    proteinNames: proteinNames,
    proteinMinimap: proteinMinimap
  };
};

/*----------------------------------------------------------------------------*/

exports.default = setupProteins;