'use strict';

exports.__esModule = true;

var _spatial = require('./spatial');

var setupProteins = function setupProteins(_ref) {
  var d3 = _ref.d3,
      chart = _ref.chart,
      defs = _ref.defs,
      onProteinClick = _ref.onProteinClick,
      onProteinMouseover = _ref.onProteinMouseover,
      onProteinMouseout = _ref.onProteinMouseout,
      data = _ref.data,
      scale = _ref.scale,
      yAxisOffset = _ref.yAxisOffset,
      xAxisOffset = _ref.xAxisOffset,
      proteinHeight = _ref.proteinHeight,
      height = _ref.height,
      uniqueSelector = _ref.uniqueSelector,
      min = _ref.min,
      max = _ref.max,
      width = _ref.width,
      domainWidth = _ref.domainWidth,
      proteinMouseover = _ref.proteinMouseover;


  var scaleLinear = d3.scaleLinear().domain([min, max]).range([yAxisOffset, width]);

  var widthZoomRatio = domainWidth / Math.max(max - min, 0.00001);

  chart.append('g').selectAll('rect').data(data.proteins).enter().append('rect').attrs({
    'clip-path': 'url(#' + uniqueSelector + '-chart-clip)',
    class: function _class(d) {
      return 'range-' + d.id + '-' + d.start + '-' + d.end;
    },
    x: function x(d) {
      return Math.max(yAxisOffset, scaleLinear(d.start)) + _spatial.halfPixel;
    },
    y: height - xAxisOffset + 40 + _spatial.halfPixel,
    width: function width(d) {
      var barWidth = (d.end - Math.max(d.start, min)) * widthZoomRatio * scale;
      return Math.max(0, barWidth - 1);
    },
    height: proteinHeight - 50 - _spatial.halfPixel,
    rx: 10,
    ry: 10,
    fill: function fill(d, i) {
      return 'hsl(\n        ' + i * 100 + ',\n        ' + (proteinMouseover === d.id ? 85 : 80) + '%,\n        ' + (proteinMouseover === d.id ? 55 : 40) + '%)\n      ';
    },
    stroke: function stroke(d, i) {
      return 'hsl(\n        ' + i * 100 + ',\n        ' + (proteinMouseover === d.id ? 65 : 60) + '%,\n        ' + (proteinMouseover === d.id ? 65 : 60) + '%)\n      ';
    },
    strokeWidth: 1,
    cursor: 'pointer'
  }).on('click', function (d) {
    if (onProteinClick) {
      onProteinClick(d);
    }
  }).on('mouseover', function (d) {
    if (onProteinMouseover) {
      onProteinMouseover(d, d3.event);
    }
  }).on('mouseout', function (d) {
    if (onProteinMouseout) {
      onProteinMouseout(d, d3.event);
    }
  });

  defs.append('g').attr('class', 'protein-text-clip-path').selectAll('clipPath').data(data.proteins).enter().append('clipPath').attr('id', function (d) {
    return uniqueSelector + '-clip-range-' + d.id + '-' + d.start + '-' + d.end;
  }).append('rect').attrs({
    class: function _class(d) {
      return 'clip-range-' + d.id + '-' + d.start + '-' + d.end + '-rect';
    },
    x: function x(d) {
      return Math.max(yAxisOffset, scaleLinear(d.start)) + _spatial.halfPixel;
    },
    y: height - xAxisOffset + _spatial.halfPixel,
    width: function width(d) {
      var barWidth = (d.end - Math.max(d.start, min)) * widthZoomRatio * scale;
      return Math.max(0, barWidth - 1);
    },
    height: proteinHeight - _spatial.halfPixel
  });

  chart.append('g').attrs({
    'clip-path': 'url(#' + uniqueSelector + '-chart-clip)'
  }).selectAll('text').data(data.proteins).enter().append('text').text(function (d) {
    return d.id.toUpperCase();
  }).attrs({
    class: function _class(d) {
      return 'protein-name-' + d.id + '-' + d.start + '-' + d.end;
    },
    'clip-path': function clipPath(d) {
      return 'url(#' + uniqueSelector + '-clip-range-' + d.id + '-' + d.start + '-' + d.end + ')';
    },
    x: function x(d) {
      var barWidth = (d.end - Math.max(d.start, min)) * widthZoomRatio * scale;
      var x = scaleLinear(d.start);
      return (barWidth + yAxisOffset < yAxisOffset ? x : Math.max(yAxisOffset, x)) + 6;
    },
    y: height - xAxisOffset + proteinHeight - 16,
    fill: function fill(d, i) {
      return 'hsl(' + i * 100 + ', 80%, 90%)';
    },
    'font-size': '11px',
    'pointer-events': 'none'
  });

  chart.append('g').selectAll('rect').data(data.proteins).enter().append('rect').attrs({
    class: function _class(d) {
      return 'domain-' + d.id;
    },
    x: function x(d) {
      return d.start * scale + yAxisOffset;
    },
    y: height - xAxisOffset + proteinHeight + 80,
    width: function width(d) {
      return (d.end - d.start) * scale;
    },
    height: 10 - _spatial.halfPixel,
    fill: function fill(d, i) {
      return 'hsl(' + i * 100 + ', 80%, 90%)';
    },
    'pointer-events': 'none'
  });
};

/*----------------------------------------------------------------------------*/

exports.default = setupProteins;